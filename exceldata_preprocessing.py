# -*- coding: utf-8 -*-
"""biotech.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HrcEuep1qAwqF7nMQLgtg7XSiFvD5Fr9
"""

import pandas as pd 
import re 
# excel_file = open('batch1.xlsx')
f = pd.read_excel('batch1.xlsx', usecols=['Question Intro', 'Question #', 'Sponsor Question', 'FDA Answer','Sponsor Email Response', 'Meeting Discussion', 'Extra Notes 1','Extra Notes 2', 'Extra Notes 3', 'Extra Notes 4'])
df = pd.DataFrame(data = f).fillna('')

#1. question # extraction from Question Intro column 
QI_cells = df['Question Intro'].tolist()
QI_row = 0 
for cell in QI_cells: 
  cell = str(cell)
  if re.search('^[1-9]', cell): 
    QI_cell_content = cell.split('.')
    df.at[QI_row, 'Question Intro'] = '.'.join(QI_cell_content[1:])
    Q_num = QI_cell_content[0]
    df.at[QI_row,'Question #'] = Q_num
  QI_row += 1

#2. extract question # from Sponsor Question column 
SQ_cells = df['Sponsor Question'].tolist()
SQ_row = 0 
for cell in SQ_cells: 
  if re.search('^[a-z]*[\.]', cell): 
    SQ_cell_content = cell.split('.')
    df.at[SQ_row, 'Sponsor Question'] = '.'.join(SQ_cell_content[1:])
    Q_num = SQ_cell_content[0]
    df.at[SQ_row,'Question #'] += Q_num
  elif re.search('^[a-z]*[\)]', cell): 
    SQ_cell_content = cell.split(')')
    df.at[SQ_row, 'Sponsor Question'] = ')'.join(SQ_cell_content[1:])
    Q_num = SQ_cell_content[0]
    df.at[SQ_row,'Question #'] += Q_num
  SQ_row += 1

#3. remove question # from FDA Answer 
FDA_cells = df['FDA Answer'].tolist()
FDA_row = 0 
for cell in FDA_cells: 
  if re.search('^[a-z]*[\)]', cell): 
    FDA_cell_content = cell.split(')')
    df.at[FDA_row, 'FDA Answer'] = ')'.join(SQ_cell_content[1:])
  elif re.search('^[a-z]*[\.]', cell): 
    FDA_cell_content = cell.split('.')
    df.at[FDA_row, 'FDA Answer'] = '.'.join(SQ_cell_content[1:])
  FDA_row += 1

# #4. assign question # to sequential question ex. 1a, b, c => 1a, 1b, 1c 
# import string 
# alphabet_list = list(string.ascii_lowercase)
# cells = df['Question #'].tolist()
# row = 0 
# for cell in cells:
#   if re.search('^[1-9][a-z]$', cell):
#     Q_num = cell[:-1]
#     Q_char = cell[-1]
#     Q_char_index = alphabet_list.index(Q_char)
#     next_row = row + 1
#     while next_row < len(cells) and df.at[next_row, 'Question #'] == alphabet_list[Q_char_index + 1]:
#       df.at[next_row, 'Question #'] = Q_num + df.at[next_row, 'Question #']
#       next_row += 1
#   row += 1

#4. assign question # to sequential question ex. 1a, b, c => 1a, 1b, 1c 
import string 
alphabet_list = list(string.ascii_lowercase)
cells = df['Question #'].tolist()
row = 0 
for cell in cells: 
  if re.search('[0-9]+[a-z]', cell): 
    Q_num = cell[:-1]
    Q_char = cell[-1]
    Q_char_index = alphabet_list.index(Q_char)
    next_cell_row = row + 1 
    while next_cell_row < len(cells) and cells[next_cell_row] == alphabet_list[Q_char_index + 1]:
      df.at[next_cell_row, 'Question #'] = Q_num + df.at[next_cell_row, 'Question #']
      next_cell_row += 1
      Q_char_index += 1
  row += 1

#room for improvement (simply update the cells list and overwrite to Question # column)

#fill FDA answer missing cell to "masked"
FDA_ans_cells = df['FDA Answer'].tolist()
FDA_index = 0 
for cell in FDA_ans_cells:
  if re.search("masked", cell) or re.search("^-", cell): 
    FDA_ans_cells[FDA_index] = "masked" 
  FDA_index += 1

df['FDA Answer'] = FDA_ans_cells

#6. red (FDA answer missing, masked), yellow(__ containing cell), green(product/study name) highlights

exception = ['FDA', 'NDA', 'e-NDA', 'CTD'] #remove words in the list from detected acronyms
def highlight_cell(value): 
  if value == "masked": 
    color = 'red'
  elif re.search('__+', value): 
    color = 'yellow'
  elif re.search('[A-Z]+[0-9]', value) or re.search('study', value.lower()) or re.search('studies', value.lower()): #study name sample: CDP870-031, D2304
    color = 'green'
  elif re.search('[A-Z][A-Z][A-Z]*', value): #for acronyms #need amendment as it excludes cells with acronym and exception word together 
    for word in exception: 
      if word in value: 
        color = 'white'
        break
      else: 
        color = 'orange'
  else: 
    color = 'white' 
  return 'background-color: %s' % color

styledf = df.style.applymap(highlight_cell)
# https://mode.com/example-gallery/python_dataframe_styling/
styledf

#6. Answer masked

#7. product name containing cell, highlight in green

#8. Bullet points

#9. remove more than one space ex. "  ", "   " between words.

#10. typo